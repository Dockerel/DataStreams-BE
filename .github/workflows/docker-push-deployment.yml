name: 🚀 Build and Deploy to Kubernetes 🐳

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up Java (Temurin JDK 17)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📄 Generate application-secret.properties
        run: |
          mkdir -p src/main/resources
          cat <<EOF > src/main/resources/application-secret.properties
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          openai.api.key=${{ secrets.OPENAI_API_KEY }}
          gemini.api.key=${{ secrets.GEMINI_API_KEY }}
          ecos.api.key=${{ secrets.ECOS_API_KEY }}
          fred.api.key=${{ secrets.FRED_API_KEY }}
          korea-stock.api.key=${{ secrets.KOREA_STOCK_API_KEY }}
          us-stock.api.key=${{ secrets.US_STOCK_API_KEY }}
          python.server.url=${{ secrets.PYTHON_SERVER_URL }}
          EOF

      - name: 📄 Generate firebase_service_key.json
        run: |
          mkdir -p src/main/resources/firebase
          cat <<EOF > src/main/resources/firebase/firebase_service_key.json
          ${{ secrets.FIREBASE_SERVICE_KEY }}
          EOF

      - name: 📄 Generate application-test.properties
        run: |
          mkdir -p src/test/resources
          cat <<EOF > src/main/resources/application-test.properties
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_TEST_DATABASE }}
          openai.api.key=${{ secrets.OPENAI_API_KEY }}
          gemini.api.key=${{ secrets.GEMINI_API_KEY }}
          ecos.api.key=${{ secrets.ECOS_API_KEY }}
          fred.api.key=${{ secrets.FRED_API_KEY }}
          korea-stock.api.key=${{ secrets.KOREA_STOCK_API_KEY }}
          us-stock.api.key=${{ secrets.US_STOCK_API_KEY }}
          python.server.url=${{ secrets.PYTHON_SERVER_URL }}
          EOF

      - name: 🛠️ Set up Gradle
        uses: gradle/wrapper-validation-action@v3

      - name: 🏗️ Build with Gradle
        run: ./gradlew clean build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔄 Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🐋 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bigpicture:latest
          no-cache: true

      - name: 🛠️ Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0'

      - name: 🔑 Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "$KUBECONFIG" > ~/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: 🚀 Deploy to Kubernetes
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          envsubst < ./k3s/deployment.yaml.template > deployment.yaml
          kubectl apply -f deployment.yaml --kubeconfig ~/.kube/config --insecure-skip-tls-verify
      
      - name: ♻️ Restart Deployment
        run: |
          kubectl rollout restart deployment bigpicture --kubeconfig ~/.kube/config --insecure-skip-tls-verify
